name: CD

on:
    push:
        branches:
            - main

jobs:
    Deploy:
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        runs-on: ubuntu-latest

        env:
            DOCKER_BUILDKIT: 1
            RAILS_ENV: production
            RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
            ECR_REGISTRY_URL: ${{ secrets.ECR_REGISTRY_URL }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Ruby
              uses: ruby/setup-ruby@v1
              with:
                  ruby-version: 3.3.6
                  bundler-cache: true

            - name: Public IP
              id: ip
              uses: haythem/public-ip@v1.3

            - name: Install dependencies
              run: |
                  gem install specific_install
                  gem specific_install https://github.com/basecamp/kamal.git

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-west-2
                  mask-aws-account-id: false

            - name: Purge all IPs from security group for port 22
              run: |
                  IP_RANGES=$(aws ec2 describe-security-groups --group-ids ${{ secrets.SECURITY_GROUP_ID }} --query "SecurityGroups[0].IpPermissions[?FromPort=='22'].IpRanges[].CidrIp" --output text)
                  for IP in $IP_RANGES; do
                    aws ec2 revoke-security-group-ingress --group-id ${{ secrets.SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr $IP
                  done

            - name: Set SSH on security group
              run: |
                  aws ec2 authorize-security-group-ingress --group-id ${{ secrets.SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

            - name: Log in to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - uses: webfactory/ssh-agent@v0.7.0
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v2

            - name: Run deploy command
              run: kamal deploy
